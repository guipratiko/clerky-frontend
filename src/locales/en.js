// English translations
export const en = {
  // Auth
  auth: {
    login: 'Login',
    register: 'Register',
    logout: 'Logout',
    email: 'Email',
    password: 'Password',
    confirmPassword: 'Confirm Password',
    name: 'Full Name',
    loginTitle: 'Sign in to access your account',
    registerTitle: 'Create Account',
    registerSubtitle: 'Register to access the WhatsApp system',
    noAccount: "Don't have an account?",
    hasAccount: 'Already have an account?',
    registerHere: 'Register here',
    goToLogin: 'Sign in',
    createAccount: 'Create Account',
    allFieldsRequired: 'All fields are required',
    nameRequired: 'Name is required',
    emailRequired: 'Email is required',
    emailInvalid: 'Invalid email',
    passwordRequired: 'Password is required',
    passwordMinLength: 'Password must be at least 6 characters',
    passwordsNotMatch: 'Passwords do not match',
    loginSuccess: 'Login successful!',
    registerSuccess: 'Registration successful!',
    loginError: 'Login error',
    registerError: 'Registration error',
    logoutSuccess: 'Logout successful!',
    secureSystem: 'Secure system with administrative approval',
    accountApproval: 'Your account has been created successfully and is awaiting administrator approval.',
    approvalNotification: 'You will receive an email notification when your account is approved.',
    afterApproval: 'After approval, you will be able to login and start using the system.',
    goToLoginButton: 'Go to Login',
    accountNeedsApproval: 'Your account will need to be approved by an administrator before it can be used.',
    passwordStrength: 'Password strength',
    passwordWeak: 'Weak',
    passwordRegular: 'Regular',
    passwordGood: 'Good',
    passwordStrong: 'Strong'
  },

  // Navigation
  nav: {
    dashboard: 'Dashboard',
    instances: 'Connection Manager',
    chat: 'Chat',
    kanban: 'Kanban',
    contacts: 'Contacts',
    campaigns: 'Mass Dispatch',
    analytics: 'Analytics',
    settings: 'Settings',
    admin: 'Admin',
    webhooks: 'N8N Integrations',
    documentation: 'Webhook Documentation',
    home: 'Home'
  },

  // Home Page
  home: {
    title: 'Connection Manager',
    subtitle: 'Complete platform for managing multiple WhatsApp Business instances with Evolution API',
    manageConnections: 'Manage Connections',
    openChat: 'Open Chat',
    mainFeatures: 'Main Features',
    featuresDescription: 'Discover all the features that make this platform the best choice for your business',
    quickAccess: 'Quick Access to Instances',
    stats: {
      activeInstances: 'Active Instances',
      totalInstances: 'Total Instances',
      disconnected: 'Disconnected',
      connecting: 'Connecting'
    },
    features: {
      whatsappConnections: {
        title: 'WhatsApp Connections',
        description: 'Manage multiple WhatsApp Business instances centrally'
      },
      advancedDashboard: {
        title: 'Advanced Dashboard',
        description: 'Monitor metrics, statistics and real-time performance'
      },
      integratedCrm: {
        title: 'Integrated CRM',
        description: 'Kanban system for lead management and sales pipeline'
      },
      highPerformance: {
        title: 'High Performance',
        description: 'Fast message processing with real-time WebSocket'
      },
      security: {
        title: 'Security',
        description: 'Secure connections and protected data with advanced encryption'
      },
      support247: {
        title: '24/7 Support',
        description: 'Complete technical assistance and detailed documentation'
      }
    }
  },

  // WhatsApp
  whatsapp: {
    title: 'WhatsApp Web',
    loadingInstance: 'Loading instance...',
    connected: 'Connected',
    disconnected: 'Disconnected',
    connecting: 'Connecting'
  },

  // Common
  common: {
    loading: 'Loading...',
    error: 'Error',
    success: 'Success',
    warning: 'Warning',
    info: 'Information',
    save: 'Save',
    cancel: 'Cancel',
    delete: 'Delete',
    edit: 'Edit',
    add: 'Add',
    search: 'Search',
    filter: 'Filter',
    refresh: 'Refresh',
    back: 'Back',
    next: 'Next',
    previous: 'Previous',
    close: 'Close',
    open: 'Open',
    yes: 'Yes',
    no: 'No',
    confirm: 'Confirm'
  },

  // App
  app: {
    name: 'Clerky CRM v1.0'
  },

  // Instance Manager
  instanceManager: {
    title: 'Connection Manager',
    subtitle: 'Manage your WhatsApp Business instances',
    addInstance: 'Add Instance',
    refresh: 'Refresh',
    instanceName: 'Instance Name',
    status: 'Status',
    actions: 'Actions',
    connect: 'Connect',
    disconnect: 'Disconnect',
    restart: 'Restart',
    delete: 'Delete',
    qrCode: 'QR Code',
    token: 'Token',
    copyToken: 'Copy Token',
    tokenCopied: 'Token copied!',
    createInstance: 'Create Instance',
    cancel: 'Cancel',
    instanceCreated: 'Instance created successfully!',
    instanceDeleted: 'Instance deleted successfully!',
    instanceConnected: 'Instance connected successfully!',
    instanceDisconnected: 'Instance disconnected successfully!',
    instanceRestarted: 'Instance restarted successfully!',
    confirmDelete: 'Are you sure you want to delete this instance?',
    noInstances: 'No instances found',
    createFirstInstance: 'Create your first instance to get started'
  },

    // Mass Dispatch
    massDispatch: {
      title: 'Mass Dispatch',
      subtitle: 'Send messages to multiple contacts',
      selectInstance: 'Select Instance',
      message: 'Message',
      contacts: 'Contacts',
      addContact: 'Add Contact',
      removeContact: 'Remove Contact',
      sendMessage: 'Send Message',
      sending: 'Sending...',
      sent: 'Sent',
      failed: 'Failed',
      totalContacts: 'Total Contacts',
      successRate: 'Success Rate',
      messageSent: 'Message sent successfully!',
      messageFailed: 'Failed to send message',
      noContacts: 'No contacts added',
      addAtLeastOneContact: 'Add at least one contact',
      status: {
        draft: 'Draft',
        validating: 'Validating',
        ready: 'Ready',
        running: 'Running',
        paused: 'Paused',
        completed: 'Completed',
        scheduled: 'Scheduled'
      },
      schedule: {
        start: 'Start',
        pause: 'Pause',
        resume: 'Resume',
        timeRemaining: 'Time remaining',
        startSending: 'Start Sending',
        startDate: 'Start Date'
      },
      progress: {
        label: 'Progress'
      },
      stats: {
        title: 'Statistics',
        total: 'Total',
        sent: 'Sent',
        failed: 'Failed',
        pending: 'Pending'
      },
      form: {
        numbers: 'Numbers (one per line)',
        enableScheduling: 'Enable scheduling',
        cancel: 'Cancel',
        createDispatch: 'Create Dispatch'
      },
      // Success messages
      dispatchCreated: 'Dispatch created successfully!',
      dispatchStarted: 'Dispatch started!',
      dispatchPaused: 'Dispatch paused!',
      dispatchResumed: 'Dispatch resumed!',
      dispatchCancelled: 'Dispatch cancelled!',
      dispatchDeleted: 'Dispatch deleted!',
      scheduledDispatchStarted: 'Scheduled dispatch started!',
      scheduledDispatchCancelled: 'Scheduled dispatch cancelled!',
      templateCreated: 'Template created successfully!',
      templateDeleted: 'Template deleted successfully!',
      // Error messages
      dispatchCreateError: 'Error creating dispatch',
      dispatchStartError: 'Error starting dispatch',
      dispatchPauseError: 'Error pausing dispatch',
      dispatchResumeError: 'Error resuming dispatch',
      dispatchCancelError: 'Error cancelling dispatch',
      dispatchDeleteError: 'Error deleting dispatch',
      scheduledDispatchNotFound: 'Scheduled dispatch not found',
      scheduledDispatchTimeError: 'Dispatch scheduled for {time}. {hours}h {minutes}min remaining.',
      scheduledDispatchStartError: 'Error starting scheduled dispatch',
      scheduledDispatchCancelError: 'Error cancelling scheduled dispatch',
      templateCreateError: 'Error creating template',
      templateDeleteError: 'Error deleting template',
      // Confirmations
      confirmCancelScheduled: 'Are you sure you want to cancel this scheduled dispatch?',
      confirmCancelDispatch: 'Are you sure you want to cancel this dispatch?',
      confirmDeleteDispatch: 'Are you sure you want to delete this dispatch?',
      confirmDeleteTemplate: 'Are you sure you want to delete this template?',
      // Interface
      deleteTemplate: 'Delete template',
      noDescription: 'No description',
      numbers: 'numbers',
      waiting: 'Waiting',
      start: 'Start',
      pause: 'Pause',
      resume: 'Resume',
      // Template types
      templateTypes: {
        text: 'Text',
        image: 'Image',
        imageCaption: 'Image + Caption',
        audio: 'Audio',
        file: 'File',
        fileCaption: 'File + Caption',
        unknown: 'Unknown'
      },
      // Main interface
      pageDescription: 'Manage your mass message dispatches',
      newTemplate: 'New Template',
      newDispatch: 'New Dispatch',
      availableTemplates: 'Available Templates',
      noTemplatesCreated: 'No templates created yet',
      createFirstTemplate: 'Create First Template',
      scheduledDispatches: 'Scheduled Dispatches',
      noDispatchesFound: 'No dispatches found',
      createFirstDispatch: 'Create your first mass dispatch',
      delete: 'Delete',
      // Forms
      createNewDispatch: 'Create New Mass Dispatch',
      createNewTemplate: 'Create New Template',
      dispatchName: 'Dispatch Name',
      templateName: 'Template Name',
      instance: 'Instance',
      templateType: 'Template Type',
      messageText: 'Message Text'
    },

  // N8N Integration
  n8nIntegration: {
    title: 'N8N Integrations',
    subtitle: 'Configure integrations with N8N',
    addIntegration: 'Add Integration',
    webhookUrl: 'Webhook URL',
    webhookSecret: 'Webhook Secret',
    isActive: 'Active',
    save: 'Save',
    cancel: 'Cancel',
    edit: 'Edit',
    delete: 'Delete',
    test: 'Test',
    integrationCreated: 'Integration created successfully!',
    integrationUpdated: 'Integration updated successfully!',
    integrationDeleted: 'Integration deleted successfully!',
    integrationTested: 'Integration tested successfully!',
    testFailed: 'Test failed',
    noIntegrations: 'No N8N integrations configured',
    createFirstIntegration: 'Create First Integration',
    newIntegration: 'New N8N Integration',
    editIntegration: 'Edit N8N Integration',
    tabs: {
      basic: 'Basic Configuration',
      events: 'Events',
      filters: 'Filters',
      advanced: 'Advanced Settings'
    },
    // Additional messages
    testMessage: 'N8N integration test',
    integrationToggled: 'Integration {status} successfully!',
    activated: 'activated',
    deactivated: 'deactivated',
    integrationDeleteError: 'Error deleting integration',
    integrationTestError: 'Error testing integration',
    integrationToggleError: 'Error changing integration status',
    // Interface
    allInstances: 'All Instances',
    activate: 'Activate',
    deactivate: 'Deactivate',
    active: 'Active',
    inactive: 'Inactive',
    webhook: 'Webhook',
    lastTest: 'Last Test',
    webhooksSent: 'Webhooks Sent',
    // Event labels
    eventLabels: {
      newMessage: 'New Message',
      messageSent: 'Message Sent',
      messageUpsert: 'Message Upsert',
      newContact: 'New Contact',
      contactUpdate: 'Contact Update',
      chatUpdate: 'Chat Update',
      connectionUpdate: 'Connection Update',
      qrCodeUpdate: 'QR Code Update'
    },
    // Additional form fields
    instance: 'Instance',
    eventsToSend: 'Events to be sent to N8N',
    dataFilters: 'Data Filters',
    includeGroups: 'Include Groups',
    includeMedia: 'Include Media',
    includeContacts: 'Include Contacts',
    minMessageLength: 'Minimum Message Length',
    retrySettings: 'Retry Settings',
    maxRetries: 'Maximum Retries',
    retryDelay: 'Delay between Retries (ms)',
    timeout: 'Timeout (ms)',
    integrationActive: 'Integration Active',
    update: 'Update',
    create: 'Create',
    
    // AI Workflows
    aiWorkflows: {
      title: 'AI Workflows',
      subtitle: 'Create intelligent virtual assistants for automatic customer service',
      createWorkflow: 'Create AI Workflow',
      newWorkflow: 'New AI Workflow',
      editWorkflow: 'Edit AI Workflow',
      noWorkflows: 'No AI workflows created',
      createFirstWorkflow: 'Create First Workflow',
      workflowCreated: 'AI Workflow created successfully!',
      workflowUpdated: 'AI Workflow updated successfully!',
      workflowDeleted: 'AI Workflow deleted successfully!',
      workflowTested: 'Workflow tested successfully!',
      workflowToggled: 'Workflow {status} successfully!',
      testFailed: 'Test failed',
      workflowDeleteError: 'Error deleting workflow',
      workflowTestError: 'Error testing workflow',
      workflowToggleError: 'Error changing workflow status',
      
      // Interface
      active: 'Active',
      inactive: 'Inactive',
      activate: 'Activate',
      deactivate: 'Deactivate',
      lastTest: 'Last Test',
      messagesProcessed: 'Messages Processed',
      successRate: 'Success Rate',
      webhookUrl: 'Webhook URL',
      n8nUrl: 'N8N URL',
      
      // Form
      prompt: 'Service Prompt',
      promptPlaceholder: 'Enter the prompt that defines how the assistant should behave...',
      promptHelp: 'Example: "You are a virtual sales assistant. Always be polite, professional and focused on helping the customer."',
      promptRequired: 'Prompt is required',
      promptMaxLength: 'Prompt too long (maximum 2000 characters)',
      
      // Statistics
      stats: {
        totalMessages: 'Total Messages',
        successfulResponses: 'Successful Responses',
        failedResponses: 'Failed Responses',
        successRate: 'Success Rate',
        lastMessageAt: 'Last Message',
        never: 'Never'
      },
      
      // Test
      testWorkflow: 'Test Workflow',
      testMessage: 'Test Message',
      testMessagePlaceholder: 'Enter a message to test the workflow...',
      testSuccess: 'Test completed successfully!',
      testError: 'Test error',
      
      // Confirmation
      deleteConfirm: 'Are you sure you want to delete this AI workflow? This action cannot be undone.',
      deleteConfirmTitle: 'Confirm Deletion',
      
      // Status
      status: {
        success: 'Success',
        failed: 'Failed',
        never: 'Never tested'
      }
    }
  },

  // Webhook Documentation
  webhookDocs: {
    title: 'Webhook Documentation',
    subtitle: 'Complete webhook integration guide',
    overview: 'Overview',
    authentication: 'Authentication',
    events: 'Events',
    examples: 'Examples',
    testing: 'Testing',
    webhookUrl: 'Webhook URL',
    webhookSecret: 'Webhook Secret',
    eventTypes: 'Event Types',
    payload: 'Payload',
    response: 'Response',
    statusCodes: 'Status Codes',
    rateLimiting: 'Rate Limiting',
    security: 'Security',
    troubleshooting: 'Troubleshooting',
    codeCopied: 'Code copied!',
    tabs: {
      overview: 'Overview',
      configuration: 'Configuration',
      events: 'Events',
      examples: 'Examples',
      sendMessages: 'Send Messages',
      kanban: 'Kanban',
      n8nIntegration: 'N8N Integration',
      troubleshooting: 'Troubleshooting'
    },
    // Additional content
    n8nAvailable: 'N8N Integration Available',
    n8nDescription: 'You can now configure N8N integrations directly in the interface! Access /n8n-integration to configure automatic webhooks.',
    whatAreWebhooks: 'What are Webhooks?',
    webhooksDescription: 'Webhooks are a form of real-time communication between applications. When something happens on our platform (like a new message), we automatically send the data to your application via HTTP POST.',
    webhooksAdvantages: 'Webhook Advantages:',
    realTime: 'Real Time',
    realTimeDescription: 'Receive data instantly when events occur',
    secure: 'Secure',
    secureDescription: 'Direct communication between servers, without public exposure',
    efficient: 'Efficient',
    efficientDescription: 'No need to constantly poll to check for changes',
    // Webhook flow steps (Added)
    webhookFlow: 'Webhook Flow',
    step1: '1. Event occurs on WhatsApp',
    step2: '2. Evolution API sends to our system',
    step3: '3. We process and send to your webhook',
    step4: '4. Your application receives the data',
    // Configuration steps (Added)
    basicConfiguration: 'Basic Configuration',
    webhookUrlStep: '1. Webhook URL',
    webhookUrlDescription: 'Configure a public URL that will receive data via HTTP POST. Your application must be accessible via internet.',
    urlExample: 'URL Example',
    receivingEndpoint: '2. Receiving Endpoint',
    receivingEndpointDescription: 'Create an endpoint that accepts POST requests and processes the received data.',
    endpointExample: 'Endpoint Example',
    systemConfiguration: '3. System Configuration',
    systemConfigurationDescription: 'Use our N8N integration interface or configure manually via API.',
    // Send Messages via API (Added)
    sendMessagesViaAPI: 'Send Messages via API',
    sendMessages: 'Send Messages',
    sendMessagesDescription: 'You can send messages through specific user instances using our REST API.',
    authentication: 'Authentication',
    authenticationDescription: 'To send messages, you need a valid authentication token. Use the token of the instance owner user.',
    authenticationHeader: 'Authentication Header',
    howToGetToken: 'How to Get the Token',
    howToGetTokenDescription: 'There are several ways to obtain the authentication token:',
    viaWebInterface: '1. Via Web Interface (Recommended)',
    stepByStep: 'Step by step',
    step1Login: '1. Log in to the web interface',
    access: 'Access',
    step2DevTools: '2. Open browser DevTools',
    step2DevToolsDescription: 'Press F12 or Ctrl+Shift+I',
    step3Application: '3. Go to the \'Application\' or \'Storage\' tab',
    step3Chrome: 'In Chrome',
    step4Token: '4. Look for the \'token\' key',
    step4TokenDescription: 'Copy the token value',
    tip: 'Tip',
    tokenSaved: 'The token is saved in the browser\'s localStorage after login.',
    viaLoginAPI: '2. Via Login API',
    loginViaAPIDescription: 'Log in via API to get the token programmatically:',
    loginViaCurl: 'Login via cURL',
    viaBrowserConsole: '3. Via Browser Console',
    executeInConsole: 'Execute this command in the browser console (F12 → Console):',
    getTokenViaConsole: 'Get Token via Console',
    result: 'Result',
    tokenWillBeDisplayed: 'The token will be displayed in the console.',
    important: 'Important',
    tokenExpires: 'The token expires after a period (usually 24h)',
    useInstanceOwnerToken: 'Always use the token of the instance owner user',
    keepTokenSecure: 'Keep the token secure and do not share it',
    useEnvironmentVariables: 'For production, use environment variables',
    sendEndpoint: 'Send Endpoint',
    sendEndpointDescription: 'Use the endpoint below to send messages through a specific instance:',
    urlParameters: 'URL Parameters',
    instanceNameDescription: 'Instance name (e.g.: test2)',
    sendPayload: 'Send Payload',
    sendPayloadDescription: 'Request body structure for sending messages:',
    requiredFields: 'Required fields',
    numberDescription: 'Recipient\'s number in WhatsApp format (e.g.: 556293557070@s.whatsapp.net)',
    textDescription: 'Content of the text message to be sent',
    practicalExample: 'Practical Example',
    practicalExampleDescription: 'Complete example of how to send a message to the "test2" instance of user "admin@clerky.com.br":',
    // Available Events (Added)
    availableEvents: 'Available Events',
    messageEvents: 'Message Events',
    messageUpsertRaw: 'Message Upsert (Raw)',
    messageUpsertDescription: 'Exact data received from Evolution API, without modifications.',
    originalPayload: 'Original Payload',
    noFilters: 'No Filters',
    newMessage: 'New Message',
    newMessageDescription: 'Messages processed by the system with enriched data.',
    processed: 'Processed',
    withFilters: 'With Filters',
    messageSent: 'Message Sent',
    messageSentDescription: 'When you send a message through the system.',
    sending: 'Sending',
    contactEvents: 'Contact Events',
    newContact: 'New Contact',
    newContactDescription: 'When a new contact is added to WhatsApp.',
    contactUpdate: 'Contact Update',
    contactUpdateDescription: 'When contact information is updated.',
    chatUpdate: 'Chat Update',
    chatUpdateDescription: 'When a conversation is moved between Kanban columns.',
    // Practical Examples (Added)
    practicalExamples: 'Practical Examples',
    example1: 'Example 1',
    payloadMessagesUpsert: 'MESSAGES_UPSERT Payload',
    example2: 'Example 2',
    newMessageProcessed: 'New Processed Message',
    payloadNewMessage: 'New Message Payload',
    example3: 'Example 3',
    processingInPython: 'Processing in Python',
    exampleInPythonFlask: 'Example in Python/Flask',
    example4: 'Example 4',
    processingInNodejs: 'Processing in Node.js',
    exampleInNodejsExpress: 'Example in Node.js/Express',
    // Kanban Card Movement (Added)
    kanbanCardMovement: 'Kanban Card Movement',
    realTimeUpdate: 'Real-time Update',
    realTimeUpdateDescription: 'Cards move instantly in Kanban when you use this webhook. No need to refresh the page!',
    endpoint: 'Endpoint',
    parameters: 'Parameters',
    chatIdDescription: 'Chat ID (e.g.: 556293557070@s.whatsapp.net)',
    columnDescription: 'Destination column in JSON body',
    validColumns: 'Valid Columns',
    inProgress: 'In Progress',
    abandonedCart: 'Abandoned Cart',
    approved: 'Approved',
    rejected: 'Rejected',
    usageExamples: 'Usage Examples',
    // Native N8N Integration (Added)
    nativeN8nIntegration: 'Native N8N Integration',
    newFeature: 'New Feature',
    newFeatureDescription: 'Now you can configure N8N integrations directly in the system interface!',
    howToUse: 'How to Use',
    step1Access: '1. Access /n8n-integration in the side menu',
    step1AccessDescription: 'Navigate to the N8N integrations section',
    step2Click: '2. Click on \'New Integration\'',
    step2ClickDescription: 'Configure your first integration',
    step3Configure: '3. Configure the N8N webhook URL',
    step3ConfigureDescription: 'Ex: https://your-n8n.com/webhook/abc123',
    step4Select: '4. Select the desired events',
    step4SelectDescription: 'Choose which events to send to N8N',
    step5Test: '5. Test the integration',
    step5TestDescription: 'Use the test button to check connectivity',
    step6Activate: '6. Activate when working',
    step6ActivateDescription: 'Your integration will be active and sending data',
    availableResources: 'Available Resources',
    individualConfiguration: 'Individual Configuration',
    individualConfigurationDescription: 'Each user can have their own N8N integrations',
    specificEvents: 'Specific Events',
    specificEventsDescription: 'Choose exactly which events to send',
    advancedFilters: 'Advanced Filters',
    advancedFiltersDescription: 'Configure filters to control the data sent',
    monitoring: 'Monitoring',
    monitoringDescription: 'Track statistics and status of integrations',
    // Troubleshooting (Added)
    troubleshooting: 'Troubleshooting',
    commonProblems: 'Common Problems',
    webhookNotReceivingData: 'Webhook does not receive data',
    possibleCauses: 'Possible causes',
    urlNotPubliclyAccessible: 'URL is not publicly accessible',
    integrationNotActive: 'Integration is not active',
    eventsNotEnabled: 'Events are not enabled',
    firewallBlockingRequests: 'Firewall blocking requests',
    error500InWebhook: 'Error 500 in webhook',
    solutions: 'Solutions',
    checkServerLogs: 'Check your server logs',
    validateDataFormat: 'Validate received data format',
    implementErrorHandling: 'Implement error handling',
    goodPractices: 'Good Practices',
    alwaysReturnStatus200: 'Always return status 200',
    alwaysReturnStatus200Description: 'To confirm webhook receipt',
    implementTimeout: 'Implement timeout',
    implementTimeoutDescription: 'Process data asynchronously',
    validateReceivedData: 'Validate received data',
    validateReceivedDataDescription: 'Check structure before processing',
    useHTTPS: 'Use HTTPS',
    useHTTPSDescription: 'For secure transmission',
    debugAndLogs: 'Debug and Logs',
    debugAndLogsDescription: 'To debug problems, check the system logs:'
  },

  // Admin Panel
  admin: {
    title: 'Administrative Panel',
    accessDenied: 'Access denied. Only administrators can access this page.',
    refresh: 'Refresh',
    pending: 'Pending',
    allUsers: 'All Users',
    noPendingUsers: 'No users waiting for approval.',
    user: 'User',
    email: 'Email',
    registrationDate: 'Registration Date',
    actions: 'Actions',
    approveUser: 'Approve user',
    rejectUser: 'Reject user',
    errorLoadingData: 'Error loading data:',
    status: {
      pending: 'Pending',
      approved: 'Approved',
      rejected: 'Rejected',
      suspended: 'Suspended'
    },
    role: {
      admin: 'Admin',
      user: 'User'
    },
    confirmAction: 'Confirm {action}',
    approval: 'Approval',
    rejection: 'Rejection',
    confirmMessage: 'Are you sure you want to {action} user {userName} ({userEmail})?',
    approve: 'approve',
    reject: 'reject',
    cancel: 'Cancel'
  }
};
